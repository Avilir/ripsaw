---
- name: Get current state
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- k8s_status:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: "{{ meta.name }}"
    namespace: "{{ operator_namespace }}"
    status:
      state: Building
      complete: false
  when: resource_state.resources[0].status.state is not defined

- name: Get current state - If it has changed
  k8s_facts:
    api_version: ripsaw.cloudbulldozer.io/v1alpha1
    kind: Benchmark
    name: '{{ meta.name }}'
    namespace: '{{ operator_namespace }}'
  register: resource_state

- block:
  - name: Provide path for vdbench - PV
    set_fact:
      vdbench_path: /mnt/vdb
    when: vdbenchd.storageclass is defined

  - name: Provide path for vdbench - No PV
    set_fact:
      fio_path: /tmp
    when: vdbenchd.storageclass is not defined

  - name: Generate vdbench test
    k8s:
      definition: "{{ lookup('template', 'configmap.yml.j2') | from_yaml }}"

  - name: Create PVC(s)
    k8s:
      definition:
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: "claim-{{ item }}-{{ trunc_uuid }}"
          namespace: '{{ operator_namespace }}'
          annotations:
             volume.beta.kubernetes.io/storage-class: "{{ vdbenchd.storageclass }}"
        spec:
           accessModes:
             - ReadWriteOnce
           resources:
             requests:
               storage: "{{ vdbenchd.storagesize }}"
    with_sequence: start=1 count={{ vdbenchd.servers }}
    when: vdbenchd.storageclass is defined

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: StartingServers
        complete: false

  - name: Start VDBench Server(s)
    k8s:
      definition: "{{ lookup('template', 'servers.yaml') | from_yaml }}"
    when: vdbenchd.servers > 0
    with_sequence: start=1 count={{ vdbenchd.servers }}

  when: resource_state.resources[0].status.state == "Building"

- block :

  - name: Capture pod list
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = vdbench-benchmark-{{ trunc_uuid }}
    register: server_pods

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: StartingClient
        complete: false
    when : "vdbenchd.servers == (server_pods | json_query('resources[].status.podIP')|length)"

  when: resource_state.resources[0].status.state == "StartingServers"

- block:

  - name: Capture updated pod list
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = vdbench-benchmark-{{ trunc_uuid }}
    register: server_pods

  - name: Create IP list and nodes
    set_fact:
      pod_details: "{{ pod_details|default({}) | combine({item.status.podIP: item.spec.nodeName}) }}"
    with_items: "{{ server_pods.resources }}"

  # can perhaps optimize here, by adding to list in above loop
  - name: Create IP list
    set_fact:
      fio_hosts: |
         {% for ip, node in pod_details.iteritems() %}
         {{ ip }}
         {% endfor %}

  - name: Generate vdbench hosts
    k8s:
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: vdbench-hosts-{{ trunc_uuid }}
          namespace: '{{ operator_namespace }}'
        data:
          hosts: |
            {{ vdbench_hosts }}

  - name: Start VDBench Client
    k8s:
      definition: "{{ lookup('template', 'client.yaml') | from_yaml }}"

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Running
        complete: false

  when: resource_state.resources[0].status.state == "StartingClient"

- block:
  - name: Capture Client pod list
    k8s_facts:
      kind: Pod
      api_version: v1
      namespace: '{{ operator_namespace }}'
      label_selectors:
        - app = vdbenchd-client-{{ trunc_uuid }}
    register: client_pods

  - k8s_status:
      api_version: ripsaw.cloudbulldozer.io/v1alpha1
      kind: Benchmark
      name: "{{ meta.name }}"
      namespace: "{{ operator_namespace }}"
      status:
        state: Complete
        complete: true
    when : "client_pods|json_query('resources[].status[]')|selectattr('phase','match','Succeeded')|list|length > 0 "

  when: resource_state.resources[0].status.state == "Running"
